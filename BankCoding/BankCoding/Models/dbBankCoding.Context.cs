//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankCoding.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbBankCodingEntities : DbContext
    {
        public dbBankCodingEntities()
            : base("name=dbBankCodingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAccount> tblAccount { get; set; }
        public virtual DbSet<tblAccountMovement> tblAccountMovement { get; set; }
        public virtual DbSet<tblAccountType> tblAccountType { get; set; }
        public virtual DbSet<tblClient> tblClient { get; set; }
        public virtual DbSet<tblMoneyAccount> tblMoneyAccount { get; set; }
        public virtual DbSet<tblParameter> tblParameter { get; set; }
        public virtual DbSet<tblReturnCode> tblReturnCode { get; set; }
        public virtual DbSet<tblTransaction> tblTransaction { get; set; }
    
        public virtual ObjectResult<spCheckBalance_Result> spCheckBalance(Nullable<int> idAccount)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckBalance_Result>("spCheckBalance", idAccountParameter);
        }
    
        public virtual ObjectResult<spCheckMovements_Result> spCheckMovements(Nullable<int> idAccount)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckMovements_Result>("spCheckMovements", idAccountParameter);
        }
    
        public virtual int spComputeInterest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spComputeInterest");
        }
    
        public virtual ObjectResult<spDeposit_Result> spDeposit(Nullable<int> idAccount, string concept, string reference, Nullable<decimal> amount)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var conceptParameter = concept != null ?
                new ObjectParameter("Concept", concept) :
                new ObjectParameter("Concept", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeposit_Result>("spDeposit", idAccountParameter, conceptParameter, referenceParameter, amountParameter);
        }
    
        public virtual ObjectResult<spGetClientsInfo_Result> spGetClientsInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClientsInfo_Result>("spGetClientsInfo");
        }
    
        public virtual ObjectResult<spGetReturnCode_Result> spGetReturnCode(string returnCode)
        {
            var returnCodeParameter = returnCode != null ?
                new ObjectParameter("ReturnCode", returnCode) :
                new ObjectParameter("ReturnCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReturnCode_Result>("spGetReturnCode", returnCodeParameter);
        }
    
        public virtual ObjectResult<spInsertAccountMovements_Result> spInsertAccountMovements(Nullable<int> idAccount, Nullable<int> idTransaction, string concept, string reference, Nullable<decimal> amount, Nullable<decimal> interests, Nullable<decimal> totalAmount)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idTransactionParameter = idTransaction.HasValue ?
                new ObjectParameter("IdTransaction", idTransaction) :
                new ObjectParameter("IdTransaction", typeof(int));
    
            var conceptParameter = concept != null ?
                new ObjectParameter("Concept", concept) :
                new ObjectParameter("Concept", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var interestsParameter = interests.HasValue ?
                new ObjectParameter("Interests", interests) :
                new ObjectParameter("Interests", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertAccountMovements_Result>("spInsertAccountMovements", idAccountParameter, idTransactionParameter, conceptParameter, referenceParameter, amountParameter, interestsParameter, totalAmountParameter);
        }
    
        public virtual ObjectResult<spTransfer_Result> spTransfer(Nullable<int> idAccount, string concept, string reference, Nullable<decimal> amount, Nullable<int> idAccountTransfer)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var conceptParameter = concept != null ?
                new ObjectParameter("Concept", concept) :
                new ObjectParameter("Concept", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var idAccountTransferParameter = idAccountTransfer.HasValue ?
                new ObjectParameter("IdAccountTransfer", idAccountTransfer) :
                new ObjectParameter("IdAccountTransfer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTransfer_Result>("spTransfer", idAccountParameter, conceptParameter, referenceParameter, amountParameter, idAccountTransferParameter);
        }
    
        public virtual ObjectResult<spWithdrawal_Result> spWithdrawal(Nullable<int> idAccount, Nullable<decimal> amount)
        {
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spWithdrawal_Result>("spWithdrawal", idAccountParameter, amountParameter);
        }
    }
}
